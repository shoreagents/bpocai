// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ApplicationStatus {
  submitted
  qualified
  for_verification
  verified
  initial_interview
  final_interview
  not_qualified
  passed
  rejected
  withdrawn
  hired
  closed
  failed
}

enum ExperienceLevel {
  entry_level
  mid_level
  senior_level
}

enum JobStatus {
  active
  inactive
  closed
  processed
}

enum LeaderboardPeriod {
  weekly
  monthly
  all
}

enum MemberStatus {
  Current_Client
  Lost_Client
}

enum Mood {
  Happy
  Satisfied
  Sad
  Undecided
}

enum Priority {
  low
  medium
  high
  urgent
}

enum Shift {
  day
  night
  both
}

enum WorkArrangement {
  onsite
  remote
  hybrid
}

enum WorkSetup {
  Work_From_Office
  Work_From_Home
  Hybrid
  Any
}

enum WorkStatus {
  employed
  unemployed_looking_for_work
  freelancer
  part_time
  on_leave
  retired
  student
  career_break
  transitioning
  remote_worker
}

enum WorkStatusNew {
  employed
  unemployed_looking_for_work
  freelancer
  part_time
  student
}

// Models
model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  first_name        String
  last_name         String
  full_name         String
  location          String
  avatar_url        String?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  phone             String?
  bio               String?
  position          String?
  admin_level       String?   @default("user")
  completed_data    Boolean   @default(false)
  birthday          DateTime? @db.Date
  slug              String?   @unique
  gender            String?
  gender_custom     String?
  location_place_id String?
  location_lat      Float?
  location_lng      Float?
  location_city     String?
  location_province String?
  location_country  String?
  location_barangay String?
  location_region   String?
  username          String?   @unique
  company           String?

  // Relations
  workStatus        UserWorkStatus?
  privacySettings   PrivacySettings?
  discPersonalityStats DiscPersonalityStats?
  typingHeroStats   TypingHeroStats?
  ultimateStats     UltimateStats?
  bpocCulturalStats BpocCulturalStats?
  leaderboardScore  UserLeaderboardScores?
  aiAnalysisResults AiAnalysisResults?
  applications      Application[]
  recruiterApplications RecruiterApplication[]
  recruiterJobs     RecruiterJob[]
  resumesExtracted  ResumesExtracted?
  resumesGenerated  ResumesGenerated?
  savedResumes      SavedResume[]
  discPersonalitySessions DiscPersonalitySession[]
  typingHeroSessions TypingHeroSession[]
  ultimateSessions  UltimateSession[]
  bpocCulturalSessions BpocCulturalSession[]
  bpocCulturalResults BpocCulturalResults?

  @@map("users")
}

model UserWorkStatus {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id              String    @unique @db.Uuid
  current_employer      String?
  current_position      String?
  current_salary        Decimal?  @db.Decimal(12, 2)
  notice_period_days    Int?
  current_mood          Mood?
  work_status           WorkStatus?
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now())
  preferred_shift       Shift?
  expected_salary       String?
  work_setup            WorkSetup?
  completed_data        Boolean? @default(false)
  work_status_new       WorkStatusNew?
  minimum_salary_range  Decimal? @db.Decimal(12, 2)
  maximum_salary_range  Decimal? @db.Decimal(12, 2)

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_work_status")
}

model PrivacySettings {
  id            Int     @id @default(autoincrement())
  user_id       String  @unique @db.Uuid
  username      String? @default("public") @db.VarChar(20)
  first_name    String? @default("public") @db.VarChar(20)
  last_name     String? @default("only-me") @db.VarChar(20)
  location      String? @default("public") @db.VarChar(20)
  job_title     String? @default("public") @db.VarChar(20)
  birthday      String? @default("only-me") @db.VarChar(20)
  age           String? @default("only-me") @db.VarChar(20)
  gender        String? @default("only-me") @db.VarChar(20)
  member_since  String? @default("public") @db.VarChar(20)
  resume_score  String? @default("public") @db.VarChar(20)
  games_completed String? @default("public") @db.VarChar(20)
  key_strengths String? @default("only-me") @db.VarChar(20)
  created_at    DateTime? @default(now())
  updated_at    DateTime? @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("privacy_settings")
}

model DiscPersonalityStats {
  id                        String    @id @default(uuid()) @db.Uuid
  user_id                   String    @unique @db.Uuid
  created_at                DateTime? @default(now())
  updated_at                DateTime? @default(now())
  total_sessions            Int       @default(0)
  completed_sessions        Int       @default(0)
  last_taken_at             DateTime?
  latest_d_score            Int?
  latest_i_score            Int?
  latest_s_score            Int?
  latest_c_score            Int?
  latest_primary_type       String?
  latest_secondary_type     String?
  best_confidence_score     Int?
  average_completion_time   Int?
  consistency_trend        Decimal?  @db.Decimal(5, 2)
  latest_ai_assessment      String?
  latest_bpo_roles          Json?     @default("[]")
  percentile                Decimal?  @db.Decimal(5, 2)
  total_xp                  Int?      @default(0)
  badges_earned             Int?      @default(0)
  cultural_alignment_score  Int?
  authenticity_score        Int?
  latest_session_xp         Int?      @default(0)

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("disc_personality_stats")
}

model DiscPersonalitySession {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id              String    @db.Uuid
  created_at           DateTime? @default(now())
  started_at           DateTime
  finished_at          DateTime?
  duration_seconds     Int?
  total_questions      Int       @default(35)
  d_score              Int       @default(0)
  i_score              Int       @default(0)
  s_score              Int       @default(0)
  c_score              Int       @default(0)
  primary_type         String
  secondary_type       String?
  confidence_score     Int?      @default(0)
  cultural_alignment   Int?      @default(95)
  consistency_index    Decimal?  @db.Decimal(5, 2)
  ai_assessment        Json?     @default("{}")
  ai_bpo_roles         Json?     @default("[]")
  core_responses       Json?     @default("[]")
  personalized_responses Json?  @default("[]")
  response_patterns    Json?     @default("{}")
  user_position        String?
  user_location        String?
  user_experience      String?
  session_status       String?   @default("completed")
  updated_at           DateTime? @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("disc_personality_sessions")
}

model TypingHeroStats {
  id                          String    @id @default(uuid()) @db.Uuid
  user_id                     String    @unique @db.Uuid
  total_sessions              Int?
  completed_sessions          Int?
  last_played_at              DateTime?
  best_score                  Int?
  best_wpm                    Int?
  best_accuracy               Decimal?  @db.Decimal(5, 2)
  best_streak                 Int?
  latest_score                Int?
  latest_wpm                  Int?
  latest_accuracy             Decimal?  @db.Decimal(5, 2)
  latest_difficulty           String?
  avg_wpm                     Decimal?  @db.Decimal(5, 2)
  avg_accuracy                Decimal?  @db.Decimal(5, 2)
  total_play_time             Int?
  ai_analysis                 Json?
  created_at                  DateTime? @default(now())
  updated_at                  DateTime? @default(now())
  total_words_correct         Int?      @default(0)
  total_words_incorrect       Int?      @default(0)
  most_common_correct_words  Json?     @default("[]")
  most_common_incorrect_words Json?    @default("[]")
  average_reaction_time       Decimal?  @db.Decimal(5, 2)
  vocabulary_strengths        Json?     @default("[]")
  vocabulary_weaknesses       Json?     @default("[]")
  generated_story             String?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("typing_hero_stats")
}

model TypingHeroSession {
  id                String    @id @default(uuid()) @db.Uuid
  user_id           String    @db.Uuid
  created_at        DateTime? @default(now())
  score             Int       @default(0)
  wpm               Int       @default(0)
  longest_streak    Int       @default(0)
  correct_words     Int       @default(0)
  wrong_words       Int       @default(0)
  elapsed_time      Int       @default(0)
  overall_accuracy  Decimal   @default(0.00) @db.Decimal(5, 2)
  ai_analysis       Json?     @default("{}")
  difficulty_level  String?   @default("rockstar")
  session_status    String?   @default("completed")
  updated_at        DateTime? @default(now())
  words_correct     Json?     @default("[]")
  words_incorrect   Json?     @default("[]")

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("typing_hero_sessions")
}

model UltimateStats {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id               String    @unique @db.Uuid
  total_sessions        Int       @default(0)
  last_taken_at         DateTime?
  smart                 Int?
  motivated             Int?
  integrity             Int?
  business              Int?
  platinum_choices      Int?
  gold_choices          Int?
  bronze_choices        Int?
  nightmare_choices     Int?
  created_at            DateTime? @default(now())
  updated_at            DateTime? @default(now())
  last_tier             String?
  last_recommendation   String?
  last_client_value     String?
  latest_competencies   Json?
  key_strengths         Json?
  development_areas     Json?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("ultimate_stats")
}

model UltimateSession {
  id                String    @id @default(uuid()) @db.Uuid
  user_id           String    @db.Uuid
  started_at        DateTime? @default(now())
  finished_at       DateTime?
  duration_ms       Int?
  smart             Int?
  motivated         Int?
  integrity         Int?
  business          Int?
  platinum_choices  Int?
  gold_choices      Int?
  bronze_choices    Int?
  nightmare_choices Int?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  tier              String?
  tier_recommendation String?
  client_value      String?
  team_morale       Int?
  client_trust      Int?
  business_impact   Int?
  crisis_pressure   Int?
  key_strengths     Json?
  development_areas Json?
  player_name       String?
  avatar            String?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("ultimate_sessions")
}

model BpocCulturalStats {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id               String    @unique @db.Uuid
  total_sessions        Int       @default(0)
  completed_sessions   Int       @default(0)
  last_played_at       DateTime?
  current_tier          String?
  tier_progression      Json      @default("[]")
  percentile            Decimal?  @db.Decimal(5, 2)
  created_at            DateTime? @default(now())
  updated_at            DateTime? @default(now())
  last_c1a_us_text      String?
  last_c1a_uk_text      String?
  last_c1a_au_text      String?
  last_c1a_ca_text      String?
  last_c1b_text         String?
  last_c1c_text         String?
  last_c2a_text         String?
  last_c2b_us_text      String?
  last_c2b_uk_text      String?
  last_c2b_au_text      String?
  last_c2b_ca_text      String?
  last_c3a_text         String?
  last_c3b_text         String?
  last_c3c_text         String?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("bpoc_cultural_stats")
}

model BpocCulturalSession {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id               String    @db.Uuid
  started_at             DateTime? @default(now())
  finished_at            DateTime?
  duration_ms            Int?
  stage_reached          Int?
  challenge_completed    Int?
  game_state             String?
  time_left              Int?
  survival_status        Int?
  interaction_count      Int?
  tier_name              String?
  tier_description       String?
  achievements           Json      @default("[]")
  metrics                Json      @default("{}")
  created_at             DateTime? @default(now())
  updated_at             DateTime? @default(now())
  c1a_us_text            String?
  c1a_uk_text            String?
  c1a_au_text            String?
  c1a_ca_text            String?
  c1b_text               String?
  c1c_text               String?
  c2a_text               String?
  c2b_us_text            String?
  c2b_uk_text            String?
  c2b_au_text            String?
  c2b_ca_text            String?
  c3a_text               String?
  c3b_text               String?
  c3c_text               String?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  results BpocCulturalResults[]

  @@map("bpoc_cultural_sessions")
}

model BpocCulturalResults {
  id            String    @id @default(uuid()) @db.Uuid
  user_id       String    @unique @db.Uuid
  session_id    String?   @db.Uuid
  model_provider String   @default("anthropic")
  model_version String
  prompt        String?
  result_json   Json      @default("{}")
  summary_text  String?
  created_at    DateTime  @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  session BpocCulturalSession? @relation(fields: [session_id], references: [id], onDelete: SetNull)

  @@map("bpoc_cultural_results")
}

model UserLeaderboardScores {
  user_id                      String  @id @db.Uuid
  typing_hero_score            Int     @default(0)
  disc_personality_score       Int     @default(0)
  profile_completion_score     Int     @default(0)
  resume_building_score        Int     @default(0)
  application_activity_score   Int     @default(0)
  overall_score                Int     @default(0)
  tier                         String  @default("Bronze")
  rank_position                Int     @default(0)
  metrics                      Json    @default("{}")
  created_at                   DateTime @default(now())
  updated_at                   DateTime @default(now())
  last_activity_at             DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_leaderboard_scores")
}

model AiAnalysisResults {
  id                            String    @id @default(uuid()) @db.Uuid
  user_id                       String    @unique @db.Uuid
  session_id                    String
  original_resume_id            String?   @db.Uuid
  overall_score                 Int
  ats_compatibility_score       Int
  content_quality_score         Int
  professional_presentation_score Int
  skills_alignment_score        Int
  key_strengths                 Json
  strengths_analysis            Json
  improvements                  Json
  recommendations               Json
  improved_summary              String
  salary_analysis               Json
  career_path                   Json
  section_analysis              Json
  analysis_metadata             Json?
  portfolio_links               Json?
  files_analyzed                Json?
  created_at                    DateTime? @default(now())
  updated_at                    DateTime? @default(now())
  candidate_profile             Json?
  skills_snapshot               Json?
  experience_snapshot           Json?
  education_snapshot            Json?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  originalResume ResumesExtracted? @relation(fields: [original_resume_id], references: [id], onDelete: SetNull)

  @@map("ai_analysis_results")
}

model ResumesExtracted {
  id                String    @id @default(uuid()) @db.Uuid
  user_id           String    @unique @db.Uuid
  resume_data       Json
  original_filename String?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  generatedResume ResumesGenerated?
  aiAnalysisResults AiAnalysisResults[]

  @@map("resumes_extracted")
}

model ResumesGenerated {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id               String    @unique @db.Uuid
  original_resume_id    String?   @unique @db.Uuid
  generated_resume_data Json
  template_used         String?
  generation_metadata   Json?
  created_at            DateTime? @default(now())
  updated_at            DateTime? @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  originalResume ResumesExtracted? @relation(fields: [original_resume_id], references: [id], onDelete: SetNull)
  savedResumes SavedResume[]

  @@map("resumes_generated")
}

model SavedResume {
  id                String    @id @default(uuid()) @db.Uuid
  user_id           String    @db.Uuid
  resume_slug       String    @unique
  resume_title      String
  resume_data       Json
  template_used     String
  is_public         Boolean?  @default(true)
  view_count        Int?      @default(0)
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  original_resume_id String?  @db.Uuid

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  originalResume ResumesGenerated? @relation(fields: [original_resume_id], references: [id], onDelete: SetNull)
  applications Application[]
  recruiterApplications RecruiterApplication[]

  @@map("saved_resumes")
}

model Application {
  id          String            @id @default(uuid()) @db.Uuid
  user_id     String            @db.Uuid
  job_id      Int
  resume_id   String            @db.Uuid
  resume_slug String
  status      ApplicationStatus @default(submitted)
  created_at  DateTime          @default(now())
  position    Int?              @default(0)
  updated_at  DateTime?         @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  job ProcessedJobRequest @relation(fields: [job_id], references: [id], onDelete: Cascade)
  resume SavedResume @relation(fields: [resume_id], references: [id], onDelete: Restrict)

  @@unique([user_id, job_id])
  @@map("applications")
}

model RecruiterApplication {
  id          String   @id @default(uuid()) @db.Uuid
  user_id     String   @db.Uuid
  job_id      String   @db.Uuid
  resume_id   String   @db.Uuid
  resume_slug String
  status      String   @default("submitted")
  created_at  DateTime @default(now())
  updated_at  DateTime? @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  job RecruiterJob @relation(fields: [job_id], references: [id], onDelete: Cascade)
  resume SavedResume @relation(fields: [resume_id], references: [id], onDelete: Restrict)

  @@unique([user_id, job_id])
  @@map("recruiter_applications")
}

model JobRequest {
  id                    Int               @id @default(autoincrement())
  company_id            String?           @db.Uuid
  job_title             String
  work_arrangement      WorkArrangement?
  salary_min            Int?
  salary_max            Int?
  job_description       String
  requirements          String[]          @default([])
  responsibilities      String[]          @default([])
  benefits              String[]          @default([])
  skills                String[]          @default([])
  experience_level      ExperienceLevel?
  application_deadline  DateTime?         @db.Date
  industry              String?
  department            String?
  work_type             String            @default("full-time")
  currency              String            @default("PHP")
  salary_type           String            @default("monthly")
  status                JobStatus         @default(active)
  views                 Int               @default(0)
  applicants            Int               @default(0)
  created_at            DateTime          @default(now())
  updated_at            DateTime          @default(now())
  priority              Priority          @default(medium)
  shift                 Shift             @default(day)

  // Relations
  company Member? @relation(fields: [company_id], references: [company_id], onDelete: SetNull)
  processedJob ProcessedJobRequest?
  comments JobRequestComment[]

  @@map("job_requests")
}

model ProcessedJobRequest {
  id                    Int               @id
  company_id            String?           @db.Uuid
  job_title             String
  work_arrangement      WorkArrangement?
  salary_min            Int?
  salary_max            Int?
  job_description       String
  requirements          String[]          @default([])
  responsibilities      String[]          @default([])
  benefits              String[]          @default([])
  skills                String[]          @default([])
  experience_level      ExperienceLevel?
  application_deadline  DateTime?         @db.Date
  industry              String?
  department            String?
  work_type             String            @default("full-time")
  currency              String            @default("PHP")
  salary_type           String            @default("monthly")
  status                JobStatus         @default(active)
  views                 Int               @default(0)
  applicants            Int               @default(0)
  created_at            DateTime          @default(now())
  updated_at            DateTime          @default(now())
  priority              Priority          @default(medium)
  shift                 Shift             @default(day)

  // Relations
  company Member? @relation(fields: [company_id], references: [company_id], onDelete: SetNull)
  originalJob JobRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("processed_job_requests")
}

model RecruiterJob {
  id                    String            @id @default(uuid()) @db.Uuid
  company_id            String?
  job_title             String
  work_arrangement      WorkArrangement?
  salary_min            Int?
  salary_max            Int?
  job_description       String
  requirements          String[]          @default([])
  responsibilities      String[]          @default([])
  benefits              String[]          @default([])
  skills                String[]          @default([])
  experience_level      ExperienceLevel?
  application_deadline  DateTime?         @db.Date
  industry              String?
  department            String?
  work_type             String            @default("full-time")
  currency              String            @default("PHP")
  salary_type           String            @default("monthly")
  status                String            @default("new_request")
  views                 Int               @default(0)
  applicants            Int               @default(0)
  created_at            DateTime          @default(now())
  updated_at            DateTime          @default(now())
  priority              Priority          @default(medium)
  shift                 Shift             @default(day)
  recruiter_id          String            @db.Uuid

  // Relations
  recruiter User @relation(fields: [recruiter_id], references: [id], onDelete: Cascade)
  applications RecruiterApplication[]

  @@map("recruiter_jobs")
}

model JobRequestComment {
  id              Int      @id @default(autoincrement())
  job_request_id  Int
  user_id         String   @db.Uuid
  comment         String
  created_at      DateTime @default(now())

  // Relations
  jobRequest JobRequest @relation(fields: [job_request_id], references: [id], onDelete: Cascade)

  @@map("job_request_comments")
}

model Member {
  company_id String   @id @default(uuid()) @db.Uuid
  company    String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  // Relations
  jobRequests JobRequest[]
  processedJobs ProcessedJobRequest[]

  @@map("members")
}

model JobMatchResult {
  user_id     String   @db.Uuid
  score       Int
  reasoning   String?
  breakdown   Json?
  analyzed_at DateTime @default(now())
  job_id      String

  @@id([user_id, job_id])
  @@map("job_match_results")
}
